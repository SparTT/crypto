{"version":3,"sources":["Crypto.js","InputValue.jsx","Body.js","serviceWorker.js","index.js"],"names":["App","crypto","this","props","price","fiats","Object","keys","values","res","i","length","owned","Number","qtd","content","Fragment","key","Intl","NumberFormat","style","currency","format","push","title","name","charAt","toUpperCase","slice","id","className","priceContainer","Component","state","comparator","cryptoName","cryptoValue","value","data","toLowerCase","setState","e","target","console","log","map","type","onChange","setValue","setCrypto","options","user","cryptos","fiatCurrencies","myC","error","isLoaded","Data","vs_currencies","fetch","then","resp","json","catch","getData","setInterval","crytosPrice","userQtd","totalFiat","val","totalInCrypto","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.447b1746.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './crypto.css';\r\n\r\nexport default class App extends Component {\r\n\r\n  priceContainer() {\r\n\r\n    var crypto = this.props.price\r\n    var fiats = Object.keys(crypto)\r\n    var values = Object.values(crypto)\r\n    var res = []\r\n\r\n    for(var i = 0; i < fiats.length; i++) {\r\n      var owned = Number(this.props.qtd) * Number(values[i])\r\n      var content = (\r\n        <React.Fragment key={`${fiats[i]}-${[i]}`}>\r\n          <div>{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: fiats[i] }).format(values[i])}</div>\r\n            <span>Owned: {this.props.qtd} </span>\r\n            <span>Value: {new Intl.NumberFormat('pt-BR', { style: 'currency', currency: fiats[i] }).format(owned)}</span>\r\n        </React.Fragment>\r\n      )\r\n      res.push(content)\r\n    }\r\n\r\n    return(\r\n      <React.Fragment>\r\n        {res}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    var title  = this.props.name\r\n    title = title.charAt(0).toUpperCase() + title.slice(1);\r\n    return (\r\n      <React.Fragment>\r\n        <div id={`${this.props.name}`} className=\"price-container\">\r\n          <h2>{title}</h2>\r\n          {this.priceContainer()}\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport './InputValue.css'\r\nexport default class App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      comparator: 1,\r\n      cryptoName: null,\r\n      cryptoValue: 2,\r\n      res: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    var value = 0\r\n    for(var i = 0; i < Object.values(this.props.data).length; i++) {\r\n      if(Object.keys(this.props.data)[0] === Object.keys(this.props.data)[i].toLowerCase()) {\r\n        value = Object.values(this.props.data)[i]\r\n        value = Object.values(value)[0]\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      cryptoName: Object.keys(this.props.data)[0],\r\n      cryptoValue: value,\r\n      res: Number(value) * Number(this.state.comparator)\r\n    })\r\n  \r\n  }\r\n\r\n\r\n  setValue(e) {\r\n    const { cryptoValue } = this.state\r\n\r\n    this.setState({\r\n      comparator: e.target.value,\r\n      res: Number(cryptoValue) * Number(e.target.value)\r\n    })\r\n  }\r\n\r\n\r\n  setCrypto(e) {\r\n\r\n    var value = 0\r\n    const { comparator } = this.state\r\n\r\n    for(var i = 0; i < Object.values(this.props.data).length; i++) {\r\n      if(e.target.value === Object.keys(this.props.data)[i]) {\r\n        value = Object.values(this.props.data)[i]\r\n        value = Object.values(value)[0]\r\n      }\r\n    }\r\n    console.log(value)\r\n    \r\n    this.setState({\r\n      cryptoName: e.target.value,\r\n      cryptoValue: value,\r\n      res: Number(value) * Number(comparator)\r\n    })\r\n  }\r\n\r\n  options() {\r\n\r\n   var names = Object.keys(this.props.data)\r\n   return(\r\n      names.map( (name) => {\r\n        return <option value={name}>{name}</option>\r\n      })\r\n    )\r\n  }\r\n\r\n  render() {\r\n    // onChange={e => this.setCrypto(e)}\r\n    const { comparator, cryptoName, res } = this.state\r\n\r\n    \r\n    return (\r\n      <div className=\"input-container\">\r\n        <div className=\"result-value\">{comparator} {cryptoName} = {res}</div>\r\n        <input type=\"number\" value={comparator} onChange={e => this.setValue(e)}/>\r\n        <select onChange={e => this.setCrypto(e)}>\r\n          {this.options()}\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}","import React, { Component } from 'react'\r\nimport Crypto from './Crypto.js';\r\nimport GetValue from './InputValue'\r\nimport './body.css'\r\n\r\nvar myC = 0.09790087\r\nvar btcBlockFi = 0.01098411\r\nvar btc = {\r\n  name: 'Bitcoin',\r\n  qtd: myC + btcBlockFi\r\n}\r\n\r\nvar xmr = {\r\n  name: 'Monero',\r\n  qtd: 1.095803000000\r\n}\r\n\r\n\r\nvar ethBlockFi = 1.00712131\r\nvar eth = {\r\n  name: 'Ethereum',\r\n  qtd: ethBlockFi\r\n}\r\n\r\n\r\nvar user = {\r\n  cryptos: 'Bitcoin,Ethereum,Monero',\r\n  fiatCurrencies: 'brl',\r\n  data: [btc, xmr, eth]\r\n}\r\n\r\nexport default class App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        error: null,\r\n        isLoaded: false,\r\n        Data: []\r\n    }\r\n  }\r\n\r\n  \r\ngetData() {\r\n  var vs_currencies = user.fiatCurrencies // fiat coin pra comparar\r\n  var id = user.cryptos\r\n \r\n   fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${id}&vs_currencies=${vs_currencies}`)\r\n   .then(resp => resp.json())\r\n   .then(resp => {\r\n     this.setState({\r\n       isLoaded: true,\r\n       Data: resp\r\n     })\r\n   }).catch(error => {\r\n     this.setState({\r\n       error: error\r\n     })\r\n   })\r\n }\r\n \r\n componentDidMount() {\r\n    this.getData()\r\n    setInterval( () => {\r\n      this.getData()\r\n    }, 1000 * 10)\r\n }\r\n\r\n\r\n  render() {\r\n    const { error, isLoaded, Data } = this.state \r\n    if (isLoaded === false) {\r\n      return <div>loading</div>\r\n    }else if (error !== null) {\r\n      return <div>{error}</div>\r\n    }else {\r\n\r\n      var cryptoName =  Object.keys(Data)\r\n      var crytosPrice = Object.values(Data)\r\n      var res = []\r\n      var userQtd = 0\r\n      var totalFiat = 0\r\n\r\n      for(var i = 0; i < crytosPrice.length; i++) {\r\n        user.data.map((val) => {\r\n          if(val.name.toLowerCase() === cryptoName[i].toLowerCase()) {\r\n\r\n            var totalInCrypto = Number(Object.values(crytosPrice[i])[0]) * Number(val.qtd)\r\n            totalFiat += totalInCrypto\r\n\r\n            userQtd = val.qtd\r\n            return userQtd\r\n          }\r\n        })\r\n        var content = <Crypto key={`${cryptoName[i]}-${[i]}`} name={cryptoName[i]} price={crytosPrice[i]} qtd={userQtd} />\r\n        res.push(content)\r\n      }\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <GetValue data={Data}/>\r\n          <div className=\"total-container\">\r\n            <h2 className=\"title\">Total em conta</h2>\r\n            <div className=\"total-fiat\">\r\n            <h3>{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: user.fiatCurrencies }).format(totalFiat)}</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"crypto-container\">\r\n            <h3 className=\"title\">Crypto Prices</h3>\r\n            {res}\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Body from './Body.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Body />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}