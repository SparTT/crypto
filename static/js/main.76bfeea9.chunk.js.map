{"version":3,"sources":["Crypto.js","InputValue.jsx","Body.js","serviceWorker.js","index.js"],"names":["App","Data","this","props","price","res","title","name","charAt","toUpperCase","slice","owned","Number","qtd","current_price","content","Fragment","key","fiat","className","Intl","NumberFormat","style","currency","format","price_change_percentage_1h_in_currency","toFixed","price_change_percentage_24h_in_currency","price_change_percentage_7d_in_currency","push","id","priceContainer","Component","state","comparator","cryptoName","setState","data","symbol","e","target","value","map","val","cryptoValue","i","length","type","onChange","setValue","setCrypto","options","user","cryptos","fiatCurrencies","myC","ethBFi","error","isLoaded","Price","vs_currencies","toLowerCase","fetch","then","resp","json","catch","getPrice","setInterval","userQtd","totalFiat","j","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"+RAGqBA,G,qLAIjB,IAAIC,EAAOC,KAAKC,MAAMC,MAClBC,EAAM,GACNC,EAASJ,KAAKC,MAAMI,KACxBD,EAAQA,EAAME,OAAO,GAAGC,cAAgBH,EAAMI,MAAM,GAEpD,IAAIC,EAAQC,OAAOV,KAAKC,MAAMU,KAAOD,OAAOX,EAAKa,eAE7CC,EACF,kBAAC,IAAMC,SAAP,CAAgBC,IAAG,UAAKf,KAAKC,MAAMe,OACjC,yBAAKC,UAAU,UAAUb,GACzB,yBAAKa,UAAU,gBAAgB,IAAIC,KAAKC,aAAa,QAAS,CAAEC,MAAO,WAAYC,SAAUrB,KAAKC,MAAMe,OAAQM,OAAOvB,EAAKa,gBAC5H,yBAAKK,UAAU,eAAf,UAAqCjB,KAAKC,MAAMU,IAAhD,KACA,yBAAKM,UAAU,oBAAf,UAA0C,IAAIC,KAAKC,aAAa,QAAS,CAAEC,MAAO,WAAYC,SAAUrB,KAAKC,MAAMe,OAAQM,OAAOb,IAClI,yBAAKQ,UAAU,gBACb,0BAAMA,UAAWlB,EAAKwB,uCAAyC,EAAI,WAAa,YAAcxB,EAAKwB,uCAAwCC,QAAQ,GAAnJ,QACA,0BAAMP,UAAWlB,EAAK0B,wCAA0C,EAAI,WAAa,YAAc1B,EAAK0B,wCAAyCD,QAAQ,GAArJ,QACA,0BAAMP,UAAWlB,EAAK2B,uCAAyC,EAAI,WAAa,YAAc3B,EAAK2B,uCAAwCF,QAAQ,GAAnJ,UAMN,OAFArB,EAAIwB,KAAKd,GAGP,kBAAC,IAAMC,SAAP,KACGX,K,+BAOL,OACE,kBAAC,IAAMW,SAAP,KACE,yBAAKc,GAAE,UAAK5B,KAAKC,MAAMI,MAAQY,UAAU,mBACtCjB,KAAK6B,uB,GAtCiBC,cCDZhC,G,wDAEnB,WAAYG,GAAQ,IAAD,8BACjB,cAAMA,IACD8B,MAAQ,CACXC,WAAY,EACZC,WAAY,KACZlC,KAAM,IALS,E,gEAUjBC,KAAKkC,SAAS,CACZD,WAAYjC,KAAKC,MAAMkC,KAAK,GAAGC,W,+BAK1BC,GACPrC,KAAKkC,SAAS,CACZF,WAAYK,EAAEC,OAAOC,U,gCAIfF,GACRrC,KAAKkC,SAAS,CACZD,WAAYI,EAAEC,OAAOC,U,gCAOxB,OADUvC,KAAKC,MAAMkC,KAEbK,KAAK,SAACC,GACT,OAAO,4BAAQ1B,IAAK0B,EAAIb,GAAIW,MAAOE,EAAIL,QAASK,EAAIb,S,+BAUxD,IAJQ,IAAD,SAC4B5B,KAAK+B,MAAhCC,EADD,EACCA,WAAYC,EADb,EACaA,WAEhBS,EAAc,EACVC,EAAI,EAAGA,EAAI3C,KAAKC,MAAMkC,KAAKS,OAAQD,IACtCV,IAAejC,KAAKC,MAAMkC,KAAKQ,GAAGP,SACnCM,EAAa1C,KAAKC,MAAMkC,KAAKQ,GAAG/B,eAIpC,IAAIT,EAAMO,OAAOsB,GAActB,OAAOgC,GAEtC,OACA,kBAAC,IAAM5B,SAAP,KACE,yBAAKG,UAAU,gBAAgBe,EAA/B,IAA4CC,EAA5C,MAA2D,IAAIf,KAAKC,aAAa,QAAS,CAAEC,MAAO,WAAYC,SAAUrB,KAAKC,MAAMoB,WAAYC,OAAOnB,IACvJ,yBAAKc,UAAU,mBACb,2BAAO4B,KAAK,SAASN,MAAOP,EAAYc,SAAU,SAAAT,GAAC,OAAI,EAAKU,SAASV,MACrE,4BAAQS,SAAU,SAAAT,GAAC,OAAI,EAAKW,UAAUX,KACnCrC,KAAKiD,iB,GA3DiBnB,cCwB7BoB,G,MAAO,CACTC,QAAS,0BACTC,eAAgB,MAChBjB,KAAM,CAtBE,CACR9B,KAAM,UACNM,IAAK0C,WAGG,CACRhD,KAAM,SACNM,IAAK,UAMG,CACRN,KAAM,WACNM,IAAK2C,gBAUcxD,E,kDAEnB,WAAYG,GAAQ,IAAD,8BACjB,cAAMA,IACD8B,MAAQ,CACTwB,MAAO,KACPC,UAAU,EACVC,MAAO,IALM,E,uDAUT,IAAD,OACLC,EAAgBR,EAAKE,eACrBxB,EAAKsB,EAAKC,QAAQQ,cAIrBC,MAAM,8DAAD,OAA+DF,EAA/D,gBAAoF9B,EAApF,iGACJiC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJ,EAAK5B,SAAS,CACZsB,UAAU,EACVC,MAAOK,OAERE,OAAM,SAAAT,GACP,EAAKrB,SAAS,CACZqB,MAAOA,S,0CAKQ,IAAD,OACjBvD,KAAKiE,WACLC,aAAa,WACX,EAAKD,aACJ,O,+BAIK,IAAD,EAC4BjE,KAAK+B,MAAhCwB,EADD,EACCA,MAAOC,EADR,EACQA,SAAUC,EADlB,EACkBA,MACzB,IAAiB,IAAbD,EACF,OAAO,wCACH,GAAc,OAAVD,EACR,OAAO,6BAAMA,GAOb,IAJA,IAAIpD,EAAM,GACNgE,EAAU,EACVC,EAAY,EAERzB,EAAI,EAAGA,EAAIO,EAAKf,KAAKS,OAAQD,IAAK,CACxC,IAAI,IAAI0B,EAAI,EAAGA,EAAInB,EAAKf,KAAKS,OAAQyB,IAAK,CACxC,GAAGnB,EAAKf,KAAKkC,GAAGhE,KAAKsD,gBAAkBF,EAAMd,GAAGf,GAAG+B,cAEjDS,GADoB1D,OAAO+C,EAAMd,GAAG/B,eAAiBF,OAAOwC,EAAKf,KAAKkC,GAAG1D,KAEzEwD,EAAUjB,EAAKf,KAAKkC,GAAG1D,IAG3B,IAAIE,EAAU,kBAAC,EAAD,CAAQE,IAAG,UAAK0C,EAAMd,GAAGf,GAAd,YAAoB,CAACe,IAAMtC,KAAMoD,EAAMd,GAAGf,GAAI1B,MAAOuD,EAAMd,GAAIhC,IAAKwD,EAASnD,KAAMkC,EAAKE,iBACjHjD,EAAIwB,KAAKd,GAGX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAUqB,KAAMsB,EAAOpC,SAAU6B,EAAKE,iBACtC,yBAAKnC,UAAU,mBACb,wBAAIA,UAAU,SAAd,kBACA,yBAAKA,UAAU,cACf,4BAAK,IAAIC,KAAKC,aAAa,QAAS,CAAEC,MAAO,WAAYC,SAAU6B,EAAKE,iBAAkB9B,OAAO8C,MAGnG,yBAAKnD,UAAU,oBACb,wBAAIA,UAAU,SAAd,iBACCd,Q,GA3EoB2B,aCpBbwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAT,GACL8B,QAAQ9B,MAAMA,EAAM+B,c","file":"static/js/main.76bfeea9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './crypto.css';\r\n\r\nexport default class App extends Component {\r\n\r\n  priceContainer() {\r\n\r\n    var Data = this.props.price\r\n    var res = []\r\n    var title  = this.props.name\r\n    title = title.charAt(0).toUpperCase() + title.slice(1);\r\n\r\n    var owned = Number(this.props.qtd) * Number(Data.current_price)\r\n\r\n    var content = (\r\n      <React.Fragment key={`${this.props.fiat}`}>\r\n        <div className=\"crypto\">{title}</div>\r\n        <div className=\"recent-price\">{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: this.props.fiat }).format(Data.current_price)}</div>\r\n        <div className=\"owned-value\">Owned: {this.props.qtd} </div>\r\n        <div className=\"user-owned-value\">Value: {new Intl.NumberFormat('pt-BR', { style: 'currency', currency: this.props.fiat }).format(owned)}</div>\r\n        <div className=\"price-change\">\r\n          <span className={Data.price_change_percentage_1h_in_currency > 0 ? 'positive' : 'negative'}>{(Data.price_change_percentage_1h_in_currency).toFixed(2)}% 1H</span>\r\n          <span className={Data.price_change_percentage_24h_in_currency > 0 ? 'positive' : 'negative'}>{(Data.price_change_percentage_24h_in_currency).toFixed(2)}% 1D</span>\r\n          <span className={Data.price_change_percentage_7d_in_currency > 0 ? 'positive' : 'negative'}>{(Data.price_change_percentage_7d_in_currency).toFixed(2)}% 7D</span>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n    res.push(content)\r\n\r\n    return(\r\n      <React.Fragment>\r\n        {res}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id={`${this.props.name}`} className=\"price-container\">\r\n          {this.priceContainer()}\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport './InputValue.css'\r\nexport default class App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      comparator: 1,\r\n      cryptoName: null,\r\n      Data: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      cryptoName: this.props.data[0].symbol,\r\n    })\r\n  }\r\n\r\n\r\n  setValue(e) {\r\n    this.setState({\r\n      comparator: e.target.value,\r\n    })\r\n  }\r\n\r\n  setCrypto(e) {\r\n    this.setState({\r\n      cryptoName: e.target.value,\r\n    })\r\n  }\r\n\r\n\r\n  options() {\r\n  var Data = this.props.data\r\n   return(\r\n      Data.map( (val) => {\r\n        return <option key={val.id} value={val.symbol}>{val.id}</option>\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    const { comparator, cryptoName } = this.state\r\n\r\n    var cryptoValue = 0\r\n    for(var i = 0; i < this.props.data.length; i++) {\r\n      if(cryptoName === this.props.data[i].symbol) {\r\n        cryptoValue =this.props.data[i].current_price\r\n      }\r\n    }\r\n\r\n    var res = Number(comparator) * Number(cryptoValue)\r\n\r\n    return (\r\n    <React.Fragment>\r\n      <div className=\"result-value\">{comparator} {cryptoName} = {new Intl.NumberFormat('pt-BR', { style: 'currency', currency: this.props.currency }).format(res)}</div>\r\n      <div className=\"input-container\">\r\n        <input type=\"number\" value={comparator} onChange={e => this.setValue(e)}/>\r\n        <select onChange={e => this.setCrypto(e)}>\r\n          {this.options()}\r\n        </select>\r\n      </div>\r\n    </React.Fragment>\r\n    )\r\n  }\r\n\r\n}","import React, { Component } from 'react'\r\nimport Crypto from './Crypto.js';\r\nimport GetValue from './InputValue'\r\nimport './body.css'\r\n\r\nvar myC = 0.09790087\r\nvar btcBFi = 0.01098411\r\nvar btc = {\r\n  name: 'Bitcoin',\r\n  qtd: myC + btcBFi\r\n}\r\n\r\nvar xmr = {\r\n  name: 'Monero',\r\n  qtd: 1.095803000000\r\n}\r\n\r\n\r\nvar ethBFi = 1.00712131\r\nvar ethBC = 0.015860642\r\nvar eth = {\r\n  name: 'Ethereum',\r\n  qtd: ethBFi + ethBC\r\n}\r\n\r\n\r\nvar user = {\r\n  cryptos: 'Bitcoin,Ethereum,Monero',\r\n  fiatCurrencies: 'brl',\r\n  data: [btc, xmr, eth]\r\n}\r\n\r\nexport default class App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        error: null,\r\n        isLoaded: false,\r\n        Price: []\r\n    }\r\n  }\r\n\r\n  \r\ngetPrice() {\r\n  var vs_currencies = user.fiatCurrencies // fiat coin pra comparar\r\n  var id = user.cryptos.toLowerCase()\r\n \r\n  // https://api.coingecko.com/api/v3/coins/markets?vs_currency=${vs_currencies}&ids=${id}&order=market_cap_desc&per_page=100&page=1&sparkline=false&price_change_percentage=1h%2C24h\r\n\r\n   fetch(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=${vs_currencies}&ids=${id}&order=market_cap_desc&per_page=100&page=1&sparkline=false&price_change_percentage=1h,24h,7d`)\r\n   .then(resp => resp.json())\r\n   .then(resp => {\r\n     this.setState({\r\n       isLoaded: true,\r\n       Price: resp\r\n     })\r\n   }).catch(error => {\r\n     this.setState({\r\n       error: error\r\n     })\r\n   })\r\n }\r\n \r\n componentDidMount() {\r\n    this.getPrice()\r\n    setInterval( () => {\r\n      this.getPrice()\r\n    }, 1000 * 10)\r\n }\r\n\r\n\r\n  render() {\r\n    const { error, isLoaded, Price } = this.state \r\n    if (isLoaded === false) {\r\n      return <div>loading</div>\r\n    }else if (error !== null) {\r\n      return <div>{error}</div>\r\n    }else {\r\n\r\n      var res = []\r\n      var userQtd = 0\r\n      var totalFiat = 0\r\n\r\n      for(var i = 0; i < user.data.length; i++) {\r\n        for(var j = 0; j < user.data.length; j++) {\r\n          if(user.data[j].name.toLowerCase() === Price[i].id.toLowerCase()) {\r\n            var totalInCrypto = Number(Price[i].current_price) * Number(user.data[j].qtd)\r\n            totalFiat += totalInCrypto\r\n            userQtd = user.data[j].qtd\r\n          }\r\n        }\r\n        var content = <Crypto key={`${Price[i].id}-${[i]}`} name={Price[i].id} price={Price[i]} qtd={userQtd} fiat={user.fiatCurrencies} />\r\n        res.push(content)\r\n      }\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <GetValue data={Price} currency={user.fiatCurrencies}/>\r\n          <div className=\"total-container\">\r\n            <h2 className=\"title\">Total em conta</h2>\r\n            <div className=\"total-fiat\">\r\n            <h3>{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: user.fiatCurrencies }).format(totalFiat)}</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"crypto-container\">\r\n            <h3 className=\"title\">Crypto Prices</h3>\r\n            {res}\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Body from './Body.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Body />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}