{"version":3,"sources":["Crypto.js","Body.js","serviceWorker.js","index.js"],"names":["App","crypto","this","props","price","fiats","Object","keys","values","res","i","length","owned","Number","qtd","content","className","key","Intl","NumberFormat","style","currency","format","name","push","Fragment","title","charAt","toUpperCase","slice","id","priceContainer","Component","user","cryptos","fiatCurrencies","data","myC","state","error","isLoaded","Data","vs_currencies","fetch","then","resp","json","setState","catch","getData","setInterval","cryptoName","crytosPrice","map","val","toLowerCase","k","renderTotal","renderCrypto","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.050627ff.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './crypto.css';\r\n\r\nexport default class App extends Component {\r\n\r\n  priceContainer() {\r\n\r\n    var crypto = this.props.price\r\n    var fiats = Object.keys(crypto)\r\n    var values = Object.values(crypto)\r\n    var res = []\r\n\r\n    for(var i = 0; i < fiats.length; i++) {\r\n      var owned = Number(this.props.qtd) * Number(values[i])\r\n      var content = (\r\n        <div className={`${fiats[i]}-price`} key={`${fiats[i]}-${[i]}`}>\r\n          <span>{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: fiats[i] }).format(values[i])}</span>\r\n          <div key={`owned-${this.props.name}-${i}`}>Owned: {this.props.qtd} | {new Intl.NumberFormat('pt-BR', { style: 'currency', currency: fiats[i] }).format(owned)}</div>\r\n        </div>\r\n      )\r\n      res.push(content)\r\n    }\r\n\r\n    return(\r\n      <React.Fragment>\r\n        {res}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    var title  = this.props.name\r\n    title = title.charAt(0).toUpperCase() + title.slice(1);\r\n    return (\r\n      <React.Fragment>\r\n        <div id={`${this.props.name}`} className=\"price-container\">\r\n          <h2>{title}</h2>\r\n          {this.priceContainer()}\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport Crypto from './Crypto.js';\r\n\r\n\r\nvar myC = 0.09790087\r\nvar btcBlockFi = 0.01098411\r\nvar btc = {\r\n  name: 'Bitcoin',\r\n  qtd: myC + btcBlockFi\r\n}\r\n\r\nvar xmr = {\r\n  name: 'Monero',\r\n  qtd: '1.095803000000'\r\n}\r\n\r\n\r\nvar ethBlockFi = 1.00712131\r\nvar eth = {\r\n  name: 'Ethereum',\r\n  qtd: ethBlockFi\r\n}\r\n\r\n\r\nvar user = {\r\n  cryptos: 'Bitcoin,Ethereum,Monero',\r\n  fiatCurrencies: 'brl',\r\n  data: [btc, xmr, eth]\r\n}\r\n\r\nexport default class App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        error: null,\r\n        isLoaded: false,\r\n        Data: []\r\n    }\r\n  }\r\n\r\n  \r\ngetData() {\r\n  var vs_currencies = user.fiatCurrencies // fiat coin pra comparar\r\n  var id = user.cryptos\r\n \r\n   fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${id}&vs_currencies=${vs_currencies}`)\r\n   .then(resp => resp.json())\r\n   .then(resp => {\r\n     this.setState({\r\n       isLoaded: true,\r\n       Data: resp\r\n     })\r\n   }).catch(error => {\r\n     this.setState({\r\n       error: error\r\n     })\r\n   })\r\n }\r\n \r\n componentDidMount() {\r\n    this.getData()\r\n    setInterval( () => {\r\n      this.getData()\r\n    }, 1000 * 10)\r\n }\r\n\r\n\r\n  renderTotal() {\r\n    const { error, isLoaded, Data  } = this.state \r\n\r\n    if (isLoaded === false) {\r\n      return <div>loading</div>\r\n    }else if (error !== null) {\r\n      return <div>{error}</div>\r\n    }else {\r\n      var cryptoName =  Object.keys(Data)\r\n      var crytosPrice = Object.values(Data)\r\n      var owned = 0\r\n\r\n      for(var i = 0; i < crytosPrice.length; i++) {\r\n        user.data.map((val) => {\r\n          if(val.name.toLowerCase() === cryptoName[i].toLowerCase()) {\r\n            var k = Number(Object.values(crytosPrice[i])[0]) * Number(val.qtd)\r\n            owned += k\r\n          }\r\n        })\r\n      }\r\n      return <span>{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: user.fiatCurrencies }).format(owned)}</span>\r\n    }\r\n  }\r\n\r\n renderCrypto() {\r\n    const { error, isLoaded, Data } = this.state \r\n    if (isLoaded === false) {\r\n      return <div>loading</div>\r\n    }else if (error !== null) {\r\n      return <div>{error}</div>\r\n    }else {\r\n      var cryptoName =  Object.keys(Data)\r\n      var crytosPrice = Object.values(Data)\r\n      var res = []\r\n      var owned = 0\r\n\r\n      for(var i = 0; i < crytosPrice.length; i++) {\r\n        user.data.map((val) => {\r\n          if(val.name.toLowerCase() === cryptoName[i].toLowerCase()) {\r\n            owned = val.qtd\r\n            return owned\r\n          }\r\n        })\r\n        var content = <Crypto key={`${cryptoName[i]}-${[i]}`} name={cryptoName[i]} price={crytosPrice[i]} qtd={owned} />\r\n        res.push(content)\r\n      }\r\n      return res\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <div>\r\n          <h2 className=\"title\">Total em conta</h2>\r\n          <div className=\"total-owned\">\r\n            {this.renderTotal()}\r\n          </div>\r\n        </div>\r\n        <div className=\"crypto-container\">\r\n          <h3 className=\"title\">Crypto Prices</h3>\r\n          {this.renderCrypto()}\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Body from './Body.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Body />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}